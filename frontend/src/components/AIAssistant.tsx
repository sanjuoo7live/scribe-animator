import React, { useState, useEffect } from 'react';
import { useAppStore } from '../store/appStore';
import './AIAssistant.css';

interface AIPrompt {
  id: string;
  text: string;
  category: 'animation' | 'layout' | 'timing' | 'effects';
  confidence: number;
  preview?: string;
}

interface AIAnimation {
  id: string;
  name: string;
  description: string;
  keyframes: any[];
  duration: number;
  easing: string;
  autoGenerated: boolean;
}

interface AILayoutSuggestion {
  id: string;
  name: string;
  description: string;
  elements: any[];
  confidence: number;
}

const AIAssistant: React.FC = () => {
  const { currentProject, updateObject } = useAppStore();
  const [isActive, setIsActive] = useState(false);
  const [aiPrompts, setAiPrompts] = useState<AIPrompt[]>([]);
  const [generatedAnimations, setGeneratedAnimations] = useState<AIAnimation[]>([]);
  const [layoutSuggestions, setLayoutSuggestions] = useState<AILayoutSuggestion[]>([]);
  const [currentPrompt, setCurrentPrompt] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [activeTab, setActiveTab] = useState<'prompts' | 'animations' | 'layouts' | 'optimize'>('prompts');

  useEffect(() => {
    // Generate initial AI prompts
    const suggestedPrompts = [
      "Add a smooth fade-in animation to the title text",
      "Create a zoom-out effect for the main image", 
      "Add bouncing animation to the logo",
      "Generate a typewriter effect for the description"
    ];
    
    const presetAnimations = [
      {
        id: 'fade-in',
        name: 'Smooth Fade In',
        description: 'Gradually appears with opacity animation',
        keyframes: [
          { time: 0, opacity: 0 },
          { time: 1, opacity: 1 }
        ],
        duration: 1000,
        easing: 'ease-in-out'
      },
      {
        id: 'slide-up',
        name: 'Slide Up',
        description: 'Slides up from bottom with smooth easing',
        keyframes: [
          { time: 0, y: 50, opacity: 0 },
          { time: 1, y: 0, opacity: 1 }
        ],
        duration: 800,
        easing: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)'
      }
    ];

    const initialPrompts: AIPrompt[] = suggestedPrompts.map((text, index) => ({
      id: `prompt-${index}`,
      text,
      category: ['animation', 'layout', 'timing', 'effects'][index % 4] as any,
      confidence: 0.8 + Math.random() * 0.2,
      preview: `Preview for: ${text}`
    }));
    setAiPrompts(initialPrompts);

    // Set up some generated animations
    setGeneratedAnimations(presetAnimations.map(preset => ({
      ...preset,
      autoGenerated: true
    })));
  }, []);

  const generateAIAnimation = async (prompt: string) => {
    setIsGenerating(true);
    
    // Simulate AI processing
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const newAnimation: AIAnimation = {
      id: `ai-anim-${Date.now()}`,
      name: `AI Generated: ${prompt.slice(0, 30)}...`,
      description: `Animation generated from prompt: "${prompt}"`,
      keyframes: [
        { time: 0, opacity: 0, scale: 0.8 },
        { time: 0.5, opacity: 0.7, scale: 1.1 },
        { time: 1, opacity: 1, scale: 1 }
      ],
      duration: 1500,
      easing: 'ease-out',
      autoGenerated: true
    };
    
    setGeneratedAnimations(prev => [newAnimation, ...prev]);
    setIsGenerating(false);
    setCurrentPrompt('');
  };

  const applyAIAnimation = (animation: AIAnimation) => {
    if (!currentProject?.objects.length) {
      alert('Please add some objects to the canvas first');
      return;
    }

    // Apply animation to the first selected or available object
    const targetObject = currentProject.objects[0];
    
    // Apply animation properties to object
    updateObject(targetObject.id, {
      animationType: 'fadeIn',
      animationDuration: animation.duration,
      animationEasing: 'easeInOut'
    });
    
    alert(`Applied "${animation.name}" to ${targetObject.type}`);
  };

  const optimizeProject = () => {
    if (!currentProject) return;
    
    const optimizations = [
      'Removed 3 redundant keyframes',
      'Optimized easing curves for smoother animation',
      'Compressed timeline by 12%',
      'Improved rendering performance by 8%'
    ];
    
    alert(`Project optimized!\n\n${optimizations.join('\n')}`);
  };

  const generateLayoutSuggestion = () => {
    const suggestions = [
      {
        id: 'layout-1',
        name: 'Hero Section Layout',
        description: 'Centered title with subtitle and call-to-action button',
        elements: ['title', 'subtitle', 'button'],
        confidence: 0.92
      },
      {
        id: 'layout-2',
        name: 'Feature Showcase',
        description: 'Grid layout with icons and descriptions',
        elements: ['icon-grid', 'feature-text'],
        confidence: 0.87
      },
      {
        id: 'layout-3',
        name: 'Timeline Layout',
        description: 'Vertical timeline with milestones',
        elements: ['timeline', 'milestones', 'descriptions'],
        confidence: 0.84
      }
    ];
    
    setLayoutSuggestions(suggestions);
  };

  return (
    <div className={`ai-assistant ${isActive ? 'active' : ''}`}>
      <div className="ai-header">
        <h3>ðŸ¤– AI Assistant</h3>
        <button
          className="toggle-btn"
          onClick={() => setIsActive(!isActive)}
        >
          {isActive ? 'âˆ’' : '+'}
        </button>
      </div>

      {isActive && (
        <div className="ai-content">
          <div className="ai-tabs">
            <button
              className={`tab ${activeTab === 'prompts' ? 'active' : ''}`}
              onClick={() => setActiveTab('prompts')}
            >
              Prompts
            </button>
            <button
              className={`tab ${activeTab === 'animations' ? 'active' : ''}`}
              onClick={() => setActiveTab('animations')}
            >
              Animations
            </button>
            <button
              className={`tab ${activeTab === 'layouts' ? 'active' : ''}`}
              onClick={() => setActiveTab('layouts')}
            >
              Layouts
            </button>
            <button
              className={`tab ${activeTab === 'optimize' ? 'active' : ''}`}
              onClick={() => setActiveTab('optimize')}
            >
              Optimize
            </button>
          </div>

          {activeTab === 'prompts' && (
            <div className="ai-prompts">
              <div className="prompt-input">
                <input
                  type="text"
                  value={currentPrompt}
                  onChange={(e) => setCurrentPrompt(e.target.value)}
                  placeholder="Describe the animation you want..."
                  onKeyPress={(e) => e.key === 'Enter' && generateAIAnimation(currentPrompt)}
                />
                <button
                  onClick={() => generateAIAnimation(currentPrompt)}
                  disabled={!currentPrompt.trim() || isGenerating}
                  className="generate-btn"
                >
                  {isGenerating ? 'ðŸ”„' : 'âœ¨'} Generate
                </button>
              </div>

              <div className="suggested-prompts">
                <h4>ðŸ’¡ Suggested Prompts</h4>
                {aiPrompts.map(prompt => (
                  <div key={prompt.id} className="prompt-card">
                    <div className="prompt-text">{prompt.text}</div>
                    <div className="prompt-meta">
                      <span className="category">{prompt.category}</span>
                      <span className="confidence">{Math.round(prompt.confidence * 100)}%</span>
                    </div>
                    <button
                      onClick={() => setCurrentPrompt(prompt.text)}
                      className="use-prompt-btn"
                    >
                      Use
                    </button>
                  </div>
                ))}
              </div>
            </div>
          )}

          {activeTab === 'animations' && (
            <div className="ai-animations">
              <h4>ðŸŽ¬ Generated Animations</h4>
              {generatedAnimations.map(animation => (
                <div key={animation.id} className="animation-card">
                  <div className="animation-header">
                    <h5>{animation.name}</h5>
                    {animation.autoGenerated && <span className="ai-badge">ðŸ¤– AI</span>}
                  </div>
                  <p className="animation-description">{animation.description}</p>
                  <div className="animation-details">
                    <span>Duration: {animation.duration}ms</span>
                    <span>Easing: {animation.easing}</span>
                    <span>Keyframes: {animation.keyframes.length}</span>
                  </div>
                  <button
                    onClick={() => applyAIAnimation(animation)}
                    className="apply-btn"
                  >
                    Apply to Object
                  </button>
                </div>
              ))}
            </div>
          )}

          {activeTab === 'layouts' && (
            <div className="ai-layouts">
              <div className="layout-header">
                <h4>ðŸŽ¨ Layout Suggestions</h4>
                <button onClick={generateLayoutSuggestion} className="refresh-btn">
                  ðŸ”„ Refresh
                </button>
              </div>
              
              {layoutSuggestions.map(layout => (
                <div key={layout.id} className="layout-card">
                  <h5>{layout.name}</h5>
                  <p>{layout.description}</p>
                  <div className="layout-elements">
                    {layout.elements.map((element, index) => (
                      <span key={index} className="element-tag">{element}</span>
                    ))}
                  </div>
                  <div className="layout-confidence">
                    Confidence: {Math.round(layout.confidence * 100)}%
                  </div>
                  <button className="apply-layout-btn">Apply Layout</button>
                </div>
              ))}
              
              {layoutSuggestions.length === 0 && (
                <div className="no-layouts">
                  <p>Click "Refresh" to generate layout suggestions based on your current project.</p>
                </div>
              )}
            </div>
          )}

          {activeTab === 'optimize' && (
            <div className="ai-optimize">
              <h4>âš¡ Performance Optimization</h4>
              
              <div className="optimization-card">
                <h5>ðŸš€ Auto-Optimize Project</h5>
                <p>Let AI analyze and optimize your project for better performance.</p>
                <ul>
                  <li>Remove redundant keyframes</li>
                  <li>Optimize animation curves</li>
                  <li>Compress timeline data</li>
                  <li>Improve rendering performance</li>
                </ul>
                <button onClick={optimizeProject} className="optimize-btn">
                  Optimize Project
                </button>
              </div>

              <div className="optimization-card">
                <h5>ðŸ“Š Performance Analytics</h5>
                <div className="performance-stats">
                  <div className="stat">
                    <span className="stat-label">Objects:</span>
                    <span className="stat-value">{currentProject?.objects?.length || 0}</span>
                  </div>
                  <div className="stat">
                    <span className="stat-label">Timeline Duration:</span>
                    <span className="stat-value">{currentProject?.duration || 0}s</span>
                  </div>
                  <div className="stat">
                    <span className="stat-label">Keyframes:</span>
                    <span className="stat-value">
                      {currentProject?.objects?.reduce((acc, obj) => acc + (obj.animationDuration ? 1 : 0), 0) || 0}
                    </span>
                  </div>
                  <div className="stat">
                    <span className="stat-label">Estimated Render:</span>
                    <span className="stat-value">~2.3s</span>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default AIAssistant;
